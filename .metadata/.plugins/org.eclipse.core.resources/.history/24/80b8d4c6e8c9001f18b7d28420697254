package model;
import java.util.ArrayList;

public class Progetto {

	//attributi
	private ArrayList<Dirigente> dirigenti;
	private ArrayList<Funzionario> funzionari;
	private ArrayList<Tecnico> tecnici;	
	
	//metodo costruttore
	public Progetto() {
		this.dirigenti = new ArrayList<>();
		this.funzionari = new ArrayList<>();
		this.tecnici = new ArrayList<>();
	}


	//metodi get/set
	public ArrayList<Dirigente> getDirigenti() {
		return dirigenti;
	}
	public Dirigente getDirigenteCodice(int searchCodice) {
		for(Dirigente d : dirigenti) {
			if(d != null && d.getCodice() == searchCodice) {
				return d;
			}
		}
		return null;
	}
	
	public ArrayList<Funzionario> getFunzionari() {
		return funzionari;
	}
	public Funzionario getFunzionarioCodice(int searchCodice) {
		for(Funzionario f : funzionari) {
			if(f != null && f.getCodice() == searchCodice) {
				return f;
			}
		}
		return null;
	}
	
	public ArrayList<Tecnico> getTecnici() {
		return tecnici;
	}
	public Tecnico getTecnicoCodice(int searchCodice) {
		
	}
	
	//metodi della funzione
	public void addDirigente(Dirigente d) {
		dirigenti.add(d);
	}
	public void addFunzionario(Funzionario f) {
		funzionari.add(f);
	}
	public void addTecnico(Tecnico t) {
		tecnici.add(t);
	}
	
	/**
	 * Questo metodo itera tra tutti i membri dell'organizzazione e
	 * somma i loro costi insieme.
	 * @return costo totale del progetto
	 */
	public double getCostoTotProgetto() {
		double costoTot = 0.0;
		
		for(Dirigente d:dirigenti) {
			if(d != null) {
				//il costo di tutti i dirigenti Ã¨ sempre lo stesso
				costoTot += Dirigente.getCostoOra();
			}
		}
		for(Funzionario f:funzionari) {
			if(f != null) {
				costoTot += f.getCostoOra();
			}
		}
		for(Tecnico t:tecnici) {
			if(t != null) {
				costoTot += t.getCostoOra();
			}
		}
		
		return costoTot;
	}

	
	//metodo toString()
	@Override
	public String toString() {
		return "Progetto [dirigenti=" + dirigenti.toString() + ", funzionari=" + funzionari.toString() + ", tecnici=" + tecnici.toString() + "]";
	}	
	
}
